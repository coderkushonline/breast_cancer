# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uY4CYBur4D4lAmhUm0gCo8pHrraNk4Ke
"""

# importing the dependencies

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import sklearn.datasets

# Data collection and processing

breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

df = pd.DataFrame(breast_cancer_dataset.data, columns=breast_cancer_dataset.feature_names)
df.head()

# Get the target/prediction value in the dataset
df['label'] = breast_cancer_dataset.target
df.tail()

df.shape

# Check for the null values
df.info()

# prompt: get the count of unique values repetitions in the column 'label' in df

# Check if the dataset is balanced
df['label'].value_counts()

# Since the dataset isn't balanced, we have to balance it.
# For that:
from sklearn.utils import resample

df_minority = df[df['label'] == 0]
df_majority = df[df['label'] == 1]

df_minority_oversampled = resample(df_minority,
                                   replace=True,     # With replacement
                                   n_samples=len(df_majority), # Match majority count
                                   random_state=42)

# Combine with majority class
df_balanced = pd.concat([df_majority, df_minority_oversampled])

# Shuffle dataset
df_balanced = df_balanced.sample(frac=1, random_state=42).reset_index(drop=True)

df_balanced['label'].value_counts()  # Check new distribution

df=df_balanced
df.info()

df.describe()

X = df.drop(['label'], axis=1)
Y = df['label']

# splitting the data into training data and testing data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3, random_state=42)

## Applying standardization to the data
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)

X_test = scaler.transform(X_test)

###### BUILDING THE NEURAL NETWORK

# import tensorflow and keras
import tensorflow as tf
tf.random.set_seed(3)
from tensorflow import keras

# setting up the layers of Neural Network

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(30,)), # turns the multidimensional array into a 1d array
    keras.layers.Dense(30, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid')
])

# Compiling the Neural network

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

### Training the Neural Network

history = model.fit(X_train, Y_train, validation_split=0.2, epochs=10)

## Visualize accuracy and loss
print(history.history)

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epochs')


plt.legend(['train', 'validation'], loc='lower right')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epochs')

plt.legend(['train', 'validation'], loc='upper right')

"""# **Building the predictive system**"""

loss, accuracy = model.evaluate(X_test, Y_test)
print("Accuracy: ", accuracy)

print(X_test.shape)
print(X_test[0])

y_pred = list(map(lambda x: 0 if x < 0.5 else 1, model.predict(X_test)))

print(y_pred)

"""**Starting to build predictive system**"""

input_data = (14.71,21.59,95.55,656.9,0.1137,0.1365,0.1293,0.08123,0.2027,0.06758,0.4226,1.15,2.735,40.09,0.003659,0.02855,0.02572,0.01272,0.01817,0.004108,17.87,30.7,115.7,985.5,0.1368,0.429,0.3587,0.1834,0.3698,0.1094
)

# Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshape the numpy array as we are predicting for one data point
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

# Standardising the input data
input_data_std = scaler.transform(input_data_reshaped)

# Prediction
prediction = model.predict(input_data_std)
print(prediction)

prediction_label = list(map(lambda x: 0 if x < 0.5 else 1, prediction))

if(prediction_label == 0):
  print("The tumor is Malignant.")
else:
  print("The tumor is Benign.")

